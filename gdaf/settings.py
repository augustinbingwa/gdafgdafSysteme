"""
Django settings for gdaf project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# BASE_DIR = Path(__file__).resolve().parent.parent
ADMIN_SITE_HEADER = "GDAF"
ADMIN_SITE_TITLE = "GDAF"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "8utn)#!@p#q@6p0=f=#l2x)%1f3iya3#&nbre8d+2j+7(ak8s!"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    "/home/servermairietest/gdaf_serveur_test/static/",
]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "mathfilters",
    "rest_framework.authtoken",
    "mod_parametrage.apps.ModParametrageConfig",
    "mod_helpers.apps.ModHelpersConfig",
    "mod_crm.apps.ModCrmConfig",
    "mod_activite.apps.ModActiviteConfig",
    "mod_transport.apps.ModTransportConfig",
    "mod_foncier.apps.ModFoncierConfig",
    "mod_finance.apps.ModFinanceConfig",
    "mod_reporting.apps.ModReportingConfig",
    "mod_documents.apps.ModDocumentsConfig",
    "qr_code",
    "widget_tweaks",
    "xhtml2pdf",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "gdaf.middleware.OnlineNowMiddleware",
]

ROOT_URLCONF = "gdaf.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR, "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "gdaf.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        'NAME': 'gdaf_serv_test_mairie2',
        'USER': 'postgres',
        'PASSWORD': 'postgres2021',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "fr-FR"

TIME_ZONE = "Africa/Bujumbura"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = "/staticfiles/"
STATIC_ROOT = os.path.join(BASE_DIR, "assets")
# repertoire upload
MEDIA_URL = "/mnt/"
MEDIA_ROOT = os.path.join(BASE_DIR, "/mnt/")


# SESSION AGE 5 Minutes
# TIME = 10*60
# SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# SESSION_COOKIE_AGE = TIME  # Change xpire session
# ESSION_IDLE_TIMEOUT = TIME  # logout

REST_FRAMEWORK = {
    # Exceptions and Errors
    "EXCEPTION_HANDLER": "api.core.exceptions.core_exception_handler",
    "NON_FIELD_ERRORS_KEY": "error",
    # Authentication
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",  # For Swagger Auth
        "rest_framework.authentication.TokenAuthentication",
    ),
    # Throttles
    # "DEFAULT_THROTTLE_CLASSES": ("rest_framework.throttling.ScopedRateThrottle",),
    # "DEFAULT_THROTTLE_RATES": {"default": "1000/day", "statement": "500/day", "operations": "300/day"},
    # Pagination
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 2,
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    # "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    # "DEFAULT_VERSION": "v1",
    # "ALLOWED_VERSIONS": ["v1"],
}


try:
    from .local_settings import *
except ImportError:
    pass

#
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {
#         "console": {
#             # exact format is not important, this is the minimum information
#             "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
#             "style": "{",
#         },
#         "django_file": {
#             # exact format is not important, this is the minimum information
#             "format": "{asctime} {levelname} {module} {message}",
#             "style": "{",
#         },
#     },
#     "handlers": {
#         "console": {
#             "level": "DEBUG",
#             "class": "logging.StreamHandler",
#             "formatter": "console",
#         },
#         "django_file": {
#             "level": "DEBUG",
#             "class": "logging.FileHandler",
#             "filename": "debug.log",
#         },
#     },
#     "loggers": {
#         "api": {"handlers": ["console"], "level": "DEBUG", "propagate": True},
#         "django.requests": {
#             "handlers": ["console"],
#             "level": "DEBUG",
#             "propagate": True,
#         },
#     },
# }
